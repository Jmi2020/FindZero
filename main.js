/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source, visit the plugin's github repository
*/

'use strict';

var obsidian = require('obsidian');

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

class ScanModal extends obsidian.Modal {
    constructor(app) {
        super(app);
        this.fileSnippets = [];
        this.selectedCount = 0;
    }
    onOpen() {
        this.scanVaultFiles();
    }
    scanVaultFiles() {
        return __awaiter(this, void 0, void 0, function* () {
            const { contentEl } = this;
            contentEl.empty();
            contentEl.createEl('h2', { text: 'Scanning for blank notes...' });
            // Get all markdown files in the vault
            const markdownFiles = this.app.vault.getMarkdownFiles();
            // Add a loading indicator
            const loadingDiv = contentEl.createDiv({ cls: 'loading' });
            loadingDiv.createSpan({ text: 'Reading files...' });
            // Process files and get snippets
            this.fileSnippets = [];
            let processedCount = 0;
            let blankFilesCount = 0;
            for (const file of markdownFiles) {
                try {
                    const content = yield this.app.vault.read(file);
                    const lines = content.split('\n');
                    // Extract the first line as title
                    const title = lines.length > 0 ? lines[0].trim() : file.basename;
                    // Remove the title line from the content assessment
                    const contentWithoutTitle = lines.slice(1).join('\n').trim();
                    const contentLength = contentWithoutTitle.length;
                    // Count non-blank lines after the title line
                    const nonBlankLines = lines.slice(1).filter(line => line.trim().length > 0).length;
                    // Consider a file blank if there's essentially no content after the title line
                    const isBlank = contentLength === 0 || nonBlankLines === 0;
                    if (isBlank) {
                        this.fileSnippets.push({
                            file,
                            title,
                            contentLength,
                            selected: false
                        });
                        blankFilesCount++;
                    }
                    processedCount++;
                    if (processedCount % 10 === 0) {
                        loadingDiv.setText(`Read ${processedCount} of ${markdownFiles.length} files... Found ${blankFilesCount} blank notes`);
                        // Small delay to allow UI to update
                        yield new Promise(resolve => setTimeout(resolve, 0));
                    }
                }
                catch (error) {
                    console.error(`Error processing file ${file.path}:`, error);
                }
            }
            // Update UI with file snippets
            this.displayFileSnippets();
        });
    }
    displayFileSnippets() {
        const { contentEl } = this;
        contentEl.empty();
        contentEl.createEl('h2', { text: 'Blank Notes' });
        if (this.fileSnippets.length === 0) {
            contentEl.createEl('p', { text: 'No blank notes found in your vault.' });
            return;
        }
        const description = contentEl.createEl('p');
        description.setText(`Found ${this.fileSnippets.length} blank notes. Select notes and use batch delete, or delete individually.`);
        // Create batch actions
        const batchActions = contentEl.createDiv({ cls: 'batch-actions' });
        const selectAllContainer = batchActions.createDiv({ cls: 'select-all-container' });
        // Create "Select All" with icon
        const selectAllIcon = selectAllContainer.createDiv({
            cls: 'selection-icon',
            attr: { id: 'select-all-icon' }
        });
        selectAllIcon.setText('○'); // Empty circle by default
        // Add "Select All" label
        const selectAllLabel = selectAllContainer.createSpan({ text: 'Select All' });
        // Add click handler for both icon and label
        const selectAllClickHandler = () => {
            const isCurrentlySelected = selectAllIcon.hasClass('is-selected');
            const newSelectedState = !isCurrentlySelected;
            // Update visual state
            if (newSelectedState) {
                selectAllIcon.addClass('is-selected');
                selectAllIcon.setText('●'); // Filled circle
            }
            else {
                selectAllIcon.removeClass('is-selected');
                selectAllIcon.setText('○'); // Empty circle
            }
            // Update all file snippets
            this.fileSnippets.forEach(fs => fs.selected = newSelectedState);
            this.selectedCount = newSelectedState ? this.fileSnippets.length : 0;
            this.updateBatchDeleteButton();
            this.updateSelectionIcons();
        };
        selectAllIcon.addEventListener('click', selectAllClickHandler);
        selectAllLabel.addEventListener('click', selectAllClickHandler);
        // Create a standalone button for batch deletion instead of using Setting
        const batchActionsButtonContainer = batchActions.createDiv({ cls: 'batch-actions-button' });
        const batchDeleteButtonEl = batchActionsButtonContainer.createEl('button', {
            text: 'Delete Selected (0)',
            cls: 'mod-cta'
        });
        batchDeleteButtonEl.disabled = true;
        // Add click event listener to the batch delete button
        batchDeleteButtonEl.addEventListener('click', () => __awaiter(this, void 0, void 0, function* () {
            if (this.selectedCount === 0)
                return;
            const selectedFiles = this.fileSnippets.filter(fs => fs.selected);
            let deletedCount = 0;
            for (const fileSnippet of selectedFiles) {
                try {
                    yield this.app.vault.delete(fileSnippet.file);
                    deletedCount++;
                }
                catch (error) {
                    new obsidian.Notice(`Failed to delete ${fileSnippet.file.path}: ${error}`);
                }
            }
            new obsidian.Notice(`Deleted ${deletedCount} files`);
            // Update the file list
            this.fileSnippets = this.fileSnippets.filter(fs => !fs.selected);
            this.selectedCount = 0;
            // Re-render the list
            this.displayFileSnippets();
        }));
        // Store batch delete button reference for updates
        this.batchDeleteButtonEl = batchDeleteButtonEl;
        // Create a container for the file list
        const fileListContainer = contentEl.createDiv({ cls: 'file-list-container' });
        for (const fileSnippet of this.fileSnippets) {
            const fileItem = fileListContainer.createDiv({ cls: 'file-item' });
            // Add selection indicator (circle icon) for batch selection
            const selectionContainer = fileItem.createDiv({ cls: 'selection-indicator' });
            // Create selection circle with appropriate icon
            const selectionIcon = selectionContainer.createDiv({ cls: 'selection-icon' });
            // Set initial state
            if (fileSnippet.selected) {
                selectionIcon.addClass('is-selected');
                selectionIcon.setText('●');
            }
            else {
                selectionIcon.setText('○');
            }
            // Add click handler to toggle selection
            selectionContainer.addEventListener('click', () => {
                fileSnippet.selected = !fileSnippet.selected;
                // Update visual state
                if (fileSnippet.selected) {
                    selectionIcon.addClass('is-selected');
                    selectionIcon.setText('●');
                }
                else {
                    selectionIcon.removeClass('is-selected');
                    selectionIcon.setText('○');
                }
                this.selectedCount += fileSnippet.selected ? 1 : -1;
                this.updateBatchDeleteButton();
                // Update select all icon state
                this.updateSelectAllIcon();
            });
            const fileInfo = fileItem.createDiv({ cls: 'file-info' });
            // Create clickable title that opens the note
            const titleEl = fileInfo.createEl('strong', {
                cls: 'file-title',
                text: fileSnippet.title || fileSnippet.file.basename
            });
            titleEl.addEventListener('click', () => __awaiter(this, void 0, void 0, function* () {
                // Open the note in a new pane
                yield this.app.workspace.getLeaf(true).openFile(fileSnippet.file);
            }));
            fileInfo.createEl('span', { text: ` (${fileSnippet.file.path})`, cls: 'file-path' });
            // Replace Setting with direct button elements
            const buttonContainer = fileItem.createDiv({ cls: 'button-container' });
            // Create Open button
            const openButton = buttonContainer.createEl('button', {
                text: 'Open',
                cls: 'file-action-button'
            });
            openButton.addEventListener('click', () => __awaiter(this, void 0, void 0, function* () {
                yield this.app.workspace.getLeaf(false).openFile(fileSnippet.file);
            }));
            // Create Delete button
            const deleteButton = buttonContainer.createEl('button', {
                text: 'Delete',
                cls: 'file-action-button'
            });
            deleteButton.addEventListener('click', () => __awaiter(this, void 0, void 0, function* () {
                try {
                    yield this.app.vault.delete(fileSnippet.file);
                    fileItem.remove();
                    // Update selected count if this item was selected
                    if (fileSnippet.selected) {
                        this.selectedCount--;
                        this.updateBatchDeleteButton();
                    }
                    // Remove from our list
                    this.fileSnippets = this.fileSnippets.filter(fs => fs.file.path !== fileSnippet.file.path);
                    new obsidian.Notice(`Deleted ${fileSnippet.file.path}`);
                    // Update count
                    description.setText(`Found ${this.fileSnippets.length} blank notes. Select notes and use batch delete, or delete individually.`);
                    if (this.fileSnippets.length === 0) {
                        fileListContainer.empty();
                        fileListContainer.createEl('p', { text: 'All blank notes have been deleted.' });
                        batchActions.hide();
                    }
                }
                catch (error) {
                    new obsidian.Notice(`Failed to delete ${fileSnippet.file.path}: ${error}`);
                }
            }));
        }
    }
    // Update the batch delete button text and state
    updateBatchDeleteButton() {
        if (!this.batchDeleteButtonEl)
            return;
        this.batchDeleteButtonEl.innerText = `Delete Selected (${this.selectedCount})`;
        this.batchDeleteButtonEl.disabled = this.selectedCount === 0;
    }
    // Update all selection icons to match their corresponding fileSnippet.selected state
    updateSelectionIcons() {
        const selectionIcons = this.contentEl.querySelectorAll('.file-item .selection-icon');
        selectionIcons.forEach((icon, index) => {
            if (index < this.fileSnippets.length) {
                if (this.fileSnippets[index].selected) {
                    icon.addClass('is-selected');
                    icon.setText('●'); // Filled circle
                }
                else {
                    icon.removeClass('is-selected');
                    icon.setText('○'); // Empty circle
                }
            }
        });
    }
    // Update the select all icon state based on whether all items are selected
    updateSelectAllIcon() {
        const selectAllIcon = this.contentEl.querySelector('#select-all-icon');
        if (selectAllIcon) {
            const allSelected = this.fileSnippets.every(fs => fs.selected);
            if (allSelected) {
                selectAllIcon.addClass('is-selected');
                selectAllIcon.setText('●'); // Filled circle
            }
            else {
                selectAllIcon.removeClass('is-selected');
                selectAllIcon.setText('○'); // Empty circle
            }
        }
    }
}

class MDCleanerPlugin extends obsidian.Plugin {
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log('Loading FindZero - MD Cleaner plugin');
            // Define our custom broom icon with a properly formatted SVG path
            obsidian.addIcon('broom-icon', `<svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M6 3L10 17" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path><path d="M2 19L4 17L8 17L10 19L2 19Z" stroke="currentColor" fill="none" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path></svg>`);
            // Add a sidebar ribbon icon
            const ribbonIconEl = this.addRibbonIcon('broom-icon', 'MD Cleaner - Find Blank Notes', () => {
                const modal = new ScanModal(this.app);
                modal.open();
            });
            ribbonIconEl.addClass('md-cleaner-ribbon-class');
            // Add a command to scan and delete markdown files
            this.addCommand({
                id: 'scan-and-delete-md-files',
                name: 'Scan & Delete Blank Notes',
                callback: () => {
                    const modal = new ScanModal(this.app);
                    modal.open();
                }
            });
        });
    }
    onunload() {
        console.log('Unloading FindZero - MD Cleaner plugin');
    }
}

module.exports = MDCleanerPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
